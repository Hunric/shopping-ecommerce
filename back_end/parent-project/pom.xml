<?xml version="1.0" encoding="UTF-8"?>
<!-- 项目对象模型(POM)，Maven项目的核心配置文件 -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<!-- Maven模型版本，现在几乎都是4.0.0 -->
	<modelVersion>4.0.0</modelVersion>
	
	<!-- 父工程继承关系配置 -->
	<!-- 所有Spring Boot项目通常都会继承spring-boot-starter-parent -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.5</version>
		<relativePath/> <!-- lookup parent from repository，表示父POM将从仓库中查找，而不是本地文件系统 -->
	</parent>
	
	<!-- 项目基本信息配置 -->
	<groupId>com.hunric</groupId> <!-- 组织ID，通常使用反向域名 -->
	<artifactId>parent-project</artifactId> <!-- 项目ID -->
	<version>0.0.1-SNAPSHOT</version> <!-- 版本号，SNAPSHOT表示开发版本 -->
	<packaging>pom</packaging> <!-- 打包方式，pom表示这是一个父工程/聚合工程 -->
	<name>parent-project</name> <!-- 项目名称 -->
	<description>Ecommerce-Shopping</description> <!-- 项目描述 -->
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	
	<modules>
		<!-- 子模块将在这里添加 -->
		<module>user</module>
		<module>merchant</module>
		<module>shop</module>
		<module>product-catalog</module>
		<module>inventory</module>
		<module>cart</module>
		<module>order</module>
		<module>logistics</module>
		<module>payment</module>
		<module>authentication-authorization</module>
		<module>file</module>
		<module>common</module>
	</modules>
	
	<properties>
		<java.version>17</java.version> <!-- 指定Java版本 -->
	</properties>
	
	<!-- 这里定义的依赖将作为子模块的公共依赖 -->
	<dependencies>
		<!-- Spring Security：提供认证、授权和保护功能 -->
		<!-- 用于实现用户登录、权限控制、防止CSRF攻击等安全特性 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		
		<!-- Spring Boot Web：Web应用开发核心依赖 -->
		<!-- 包含SpringMVC、内嵌Tomcat、RESTful支持等，用于构建Web应用和API -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
		<!-- MyBatis与Spring Boot集成：提供ORM功能 -->
		<!-- 简化数据库访问，支持SQL映射、注解配置，实现Java对象与数据库表的映射 -->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>3.0.4</version>
		</dependency>

		<!-- MySQL连接驱动：提供Java应用与MySQL数据库的连接能力 -->
		<!-- 用于建立与MySQL数据库的连接，执行SQL语句和处理结果集 -->
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope> <!-- runtime表示仅在运行时需要，编译时不需要 -->
		</dependency>
		
		<!-- Flyway数据库迁移工具 -->
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-mysql</artifactId>
		</dependency>
		
		<!-- Lombok：通过注解减少样板代码 -->
		<!-- 自动生成getter/setter、构造器、equals/hashCode等方法，提高开发效率 -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional> <!-- optional=true表示子模块可选择是否继承此依赖 -->
		</dependency>
		
		<!-- Spring Boot测试：提供测试框架和工具 -->
		<!-- 包含JUnit、AssertJ、Mockito等测试工具，用于单元测试和集成测试 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope> <!-- test表示仅在测试阶段使用，不会打包到生产环境 -->
		</dependency>
		
		<!-- MyBatis测试支持：用于测试MyBatis相关功能 -->
		<!-- 提供测试MyBatis映射器和SQL执行的工具，支持数据库访问层的单元测试 -->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter-test</artifactId>
			<version>3.0.4</version>
			<scope>test</scope>
		</dependency>
		
		<!-- Spring Security测试：安全功能测试支持 -->
		<!-- 提供模拟认证用户、测试安全配置等功能，用于测试受保护的接口和资源 -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		<!-- Spring Boot邮件服务：用于发送电子邮件 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		
		<!-- Redis缓存支持：用于存储验证码 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		
		<!-- 添加Jackson JSR310模块 -->
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<!-- 这里定义的依赖管理可以被子模块选择性继承，不会直接引入 -->
	<dependencyManagement>
		<dependencies>
			<!-- 可以在这里添加其他依赖管理 -->
		</dependencies>
	</dependencyManagement>

</project>
